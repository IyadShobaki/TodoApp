@page "/counter"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo



<PageTitle>Counter</PageTitle>

<h1>ToDo List</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false) 
{
    <div class="h3 text-danger">@errorMessage</div>
}

<button class="btn btn-primary" @onclick="FetchTodos">Get ToDo List</button>

@if(todos is not null)
{
    @foreach (var t in todos)
    {
        if(t.IsComplete)
        {
            <div class="h2">@t.Task (Completed)</div>
        }
        else
        {
            <div class="h2">
                @t.Task
                <button class="btn btn-sm btn-primary"
                        @onclick="() => CompleteTodo(t)">Complete</button>
            </div>
        }
    }
}

@code {
    private List<TodoUIModel>? todos;
    private HttpClient? client; // will last for the life of this page
    private string? errorMessage;

    private async void FetchTodos()
    {
        errorMessage = "";
        client = factory.CreateClient("api");
        // Set the request header for every call from this client "api"
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            
            todos= await client.GetFromJsonAsync<List<TodoUIModel>>("Todos");
           
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void CompleteTodo(TodoUIModel todo)
    {
        var test = await client!.PutAsJsonAsync<string>($"Todos/{todo.Id}/Complete", "");

        // test = test.Content.ReadAsStringAsync().Result;
        // JArray jArray = JObject.Parse(test.Content.ReadAsStringAsync().Result);
        if (test.IsSuccessStatusCode)
        {
        // Instead of making a call to the DB to fetch the list we can just change the todo model property IsComplete to true
            todo.IsComplete = true;
            await InvokeAsync(StateHasChanged);
            
        }
    }
}
