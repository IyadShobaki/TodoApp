@page "/"
@using System.Net.Http.Json
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo


<PageTitle>Index</PageTitle>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="h3 text-danger">@errorMessage</div>
}


@if(isLoggedIn)
{
    <h1>Yo are LoggedIn</h1>
    <button class="btn btn-danger" @onclick="LogOut">Log Out</button>
}
else
{
    <h1>Please Log In</h1>

    <EditForm Model="login" OnValidSubmit="HandleValidSubmit">
        <InputText @bind-Value="login.UserName" />
        @* Added @oninput="@((ui) => { login.Password = ui.Value.ToString(); })" 
            to password field because Blazor doesn't see the value. The root cause is because 
            of secure keyboard input feature of the Anti Virus. 
            Work around options:
            (copy and paste the password/ fill the password by password manager/
            Add "localhost" to the exclusions of the Anti Virus)
        *@
        <InputText type="password" @bind-Value="login.Password" @oninput="@((ui) => {login.Password = ui.Value.ToString();})" /> 

        <button class="btn btn-success" type="submit">Log In</button>

    </EditForm>
}
@code{
    private AuthenticationModel login = new();
    private bool isLoggedIn = false;
    private string? errorMessage;


    protected override void OnInitialized()
    {
        isLoggedIn = !string.IsNullOrWhiteSpace(tokenInfo.Token);
    }

    private async void HandleValidSubmit()
    {
        errorMessage = "";
        var client = factory.CreateClient("api");

        var info = await client.PostAsJsonAsync<AuthenticationModel>("Authentication/token", login);

        string[] infoJson = info.ToString().Split(','); // temporary solution 
        if (info.IsSuccessStatusCode)
        {
            tokenInfo.Token = await info.Content.ReadAsStringAsync();
            isLoggedIn = true;
            await InvokeAsync(StateHasChanged); // To let Blazor know and render the page
                                                //  (because we are using async coding)
        }
        else
        {

            errorMessage = $"{infoJson[0]}, {info.ReasonPhrase}";
            await InvokeAsync(StateHasChanged);
        }

    }

    private void LogOut()
    {
        tokenInfo.Token = "";
        isLoggedIn = false;

    }
}

